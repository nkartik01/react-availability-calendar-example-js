{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["CalModeToolbar","calMode","setCalMode","className","label","calModeTarget","CalModeButton","onClick","calModeBtnStyle","styleShow","position","transition","transform","styleHide","calModeSelected","blockOutAllDay","blockOutMorning","blockOutNoon","blockOutEvening","App","useState","selectedAvails","setSelectedAvails","showCustomToolBar","setShowCustomToolBar","timeOfDayMode","setTimeOfDayMode","Date","lastSelectedDay","setLastSelectedDay","calVersion","setCalVersion","blockOutPeriods","blockOutsForCalMode","bookings","startDate","endDate","overrides","useMemo","defaultComponents","ToolBar","style","minHeight","undefined","ToolBarButton","outline","AvailSlot","p","date","getTime","Weekday","borderWidth","borderStyle","borderBottomWidth","borderRightWidth","borderColor","DayCell","isSelected","height","width","additionalClassForWasSelected","hasAvail","maxWidth","maxHeight","overflowY","key","providerTimeZone","moment","initialDate","onAvailabilitySelected","a","console","log","startMs","wasSelected","onDaySelected","day","onCalRangeChange","r","backgroundColor","top","left","version","float","paddingRight","format","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.5ca3c646.chunk.js","sourcesContent":["import React, { useState, useMemo } from \"react\";\n\nimport {\n  AvailabilityCalendar,\n  // AvailabilityEvent,\n  // MsSinceMidnightRange,\n  // Booking,\n  // Range,\n  defaultComponents,\n} from \"react-availability-calendar\";\nimport moment from \"moment\";\n\n// import \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"./custom.scss\";\n// import { Overrides } from \"react-availability-calendar/dist/overrides\";\n\nconst msInHour = 60 * 60 * 1000;\n\nconst App = () => {\n  const [selectedAvails, setSelectedAvails] = useState(\n    /*<{[key: number]: AvailabilityEvent | null;}>*/ {}\n  );\n\n  // for optional custom toolbar\n  const [showCustomToolBar, setShowCustomToolBar] = useState(false);\n  const [timeOfDayMode, setTimeOfDayMode] = useState(\"evening\"); //\"allDay\" | \"morning\" | \"evening\" | \"noon\";\n  const [lastSelectedDay, setLastSelectedDay] = useState(new Date());\n  const [calVersion, setCalVersion] = useState(1);\n\n  const onAvailabilitySelected = (a /*: AvailabilityEvent*/) => {\n    console.log(\"Availability slot selected!: \", a);\n    const startMs = a.startDate.getTime();\n    const wasSelected = !!selectedAvails[startMs];\n    setSelectedAvails((selectedAvails) => ({\n      ...selectedAvails,\n      [startMs]: wasSelected ? null : a,\n    }));\n  };\n\n  // for optional custom toolbar\n  const onDaySelected = (day /*: Date | null */) => {\n    setShowCustomToolBar(!!day);\n\n    // to restore the next time calVersion upates\n    if (day) {\n      setLastSelectedDay(day);\n    }\n  };\n  const handleCloseToolBar = () => {\n    setShowCustomToolBar(false);\n\n    // remount calendar to close the day view\n    //(we're using version as \"key\" below)\n    setCalVersion((version) => version + 1);\n  };\n\n  const onChangedCalRange = (r /*: Range*/) =>\n    console.log(\"Calendar range selected (fetch bookings here): \", r);\n\n  const providerTimeZoneForBlockOutHours = \"America/New_York\";\n  // const blockOutPeriods /*: MsSinceMidnightRange[]*/ = [\n  //   [0 * msInHour, 9 * msInHour],\n  //   [19 * msInHour, 24 * msInHour],\n  // ];\n  const blockOutPeriods = blockOutsForCalMode(timeOfDayMode);\n\n  const bookings /*: Booking[]*/ = [\n    {\n      startDate: new Date(2020, 2, 1, 19),\n      endDate: new Date(2020, 2, 1, 20),\n    },\n    {\n      startDate: new Date(2020, 2, 1, 16, 30),\n      endDate: new Date(2020, 2, 1, 17),\n    },\n  ];\n\n  // Optional overrides to tweak appearance of various components\n  const overrides = useMemo(\n    /*<Overrides>*/\n    () => ({\n      ...defaultComponents,\n      // ToolBar: { Root: (p: any) => <div>{JSON.stringify(p)}</div> },\n      ToolBar: {\n        className: \"border btn-group\",\n        style: { minHeight: undefined },\n      },\n      ToolBarButton: {\n        className: \"btn btn-outline-info\",\n        style: { outline: \"none\" },\n      },\n      AvailSlot: {\n        className: (p) =>\n          selectedAvails[p.date.getTime()]\n            ? \"btn btn-secondary\"\n            : \"btn btn-primary\",\n      },\n      Weekday: {\n        style: {\n          borderWidth: 0,\n          borderStyle: \"solid\",\n          borderBottomWidth: 1,\n          borderRightWidth: 1,\n          borderColor: \"#dddddd\",\n        },\n        className: \"none\",\n      },\n      DayCell: {\n        style: (p) =>\n          p.isSelected\n            ? { transition: \"width 200ms, height 200ms\", height: 60, width: 60 }\n            : { transition: \"width 200ms, height 200ms\" },\n        className: (p) => {\n          const wasSelected = p.date.getTime() === lastSelectedDay.getTime();\n          const additionalClassForWasSelected = wasSelected\n            ? \" font-weight-bold\"\n            : \"\";\n          return (\n            (p.isSelected\n              ? \"rounded-circle border-success\"\n              : p.hasAvail\n              ? \"rounded-circle border-primary\"\n              : \"rounded-circle border-secondary\") +\n            additionalClassForWasSelected\n          );\n        },\n      },\n    }),\n    [selectedAvails, lastSelectedDay]\n  );\n\n  return (\n    <div\n      style={{\n        position: \"relative\",\n      }}\n    >\n      <div style={{ maxWidth: 350, maxHeight: 520, overflowY: \"auto\" }}>\n        <AvailabilityCalendar\n          key={\"cal_v\" + calVersion}\n          bookings={bookings}\n          providerTimeZone={providerTimeZoneForBlockOutHours}\n          moment={moment}\n          initialDate={lastSelectedDay}\n          calMode={timeOfDayMode}\n          onAvailabilitySelected={onAvailabilitySelected}\n          onDaySelected={onDaySelected}\n          onCalRangeChange={onChangedCalRange}\n          blockOutPeriods={blockOutPeriods}\n          overrides={overrides}\n        />\n      </div>\n      <div\n        className=\"shadow\"\n        style={{\n          width: \"100%\",\n          maxWidth: 350,\n          backgroundColor: \"rgba(200, 200, 200, 1)\",\n          position: \"absolute\",\n          ...(showCustomToolBar ? styleShow : styleHide),\n          top: 0,\n          left: 0,\n        }}\n      >\n        <CalModeToolbar calMode={timeOfDayMode} setCalMode={setTimeOfDayMode} />\n        <button\n          className=\"btn btn-sm btn-outline-secondary\"\n          onClick={handleCloseToolBar}\n        >\n          Close\n        </button>\n        {lastSelectedDay && (\n          <div\n            className=\"text-primary\"\n            style={{ float: \"right\", paddingRight: 50 }}\n          >\n            <small>Selected:</small> {moment(lastSelectedDay).format(\"ddd, ll\")}\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\n// Optional example custom tool bar\n\nconst CalModeToolbar = (\n  {\n    calMode,\n    setCalMode,\n  } /*: {\n  calMode: CalMode,\n  setCalMode: (c: CalMode) => any,\n}*/\n) => (\n  <div className=\"m-1 btn-group\">\n    <CalModeButton\n      label=\"Morning\"\n      calModeTarget=\"morning\"\n      {...{ setCalMode, calMode }}\n    />\n    <CalModeButton\n      label=\"Noon\"\n      calModeTarget=\"noon\"\n      {...{ setCalMode, calMode }}\n    />\n    <CalModeButton\n      label=\"Evening\"\n      calModeTarget=\"evening\"\n      {...{ setCalMode, calMode }}\n    />\n    <CalModeButton\n      label=\"All Day\"\n      calModeTarget=\"allDay\"\n      {...{ setCalMode, calMode }}\n    />\n  </div>\n);\n\nconst CalModeButton = (\n  {\n    calMode,\n    setCalMode,\n    calModeTarget,\n    label,\n  } /*: {\n  calMode: CalMode,\n  setCalMode: (c: CalMode) => any,\n  calModeTarget: CalMode,\n  label: string,\n}*/\n) => (\n  <button\n    onClick={() => setCalMode(calModeTarget)}\n    className={calModeBtnStyle(calMode, calModeTarget)}\n  >\n    {label}\n  </button>\n);\n\nconst styleShow = {\n  position: \"absolute\",\n  transition: \"transform 300ms\",\n  transform: \"scale(1)\",\n};\nconst styleHide = {\n  position: \"absolute\",\n  transition: \"transform 300ms\",\n  transform: \"scale(0)\",\n};\nconst calModeBtnStyle = (\n  calModeSelected /*: CalMode*/,\n  calModeTarget /*: CalMode*/\n) =>\n  calModeSelected === calModeTarget\n    ? \"btn btn-sm btn-primary\"\n    : \"btn btn-sm btn-default\";\n\nconst blockOutAllDay = [];\n\nconst blockOutMorning = [\n  [0 * msInHour, 5 * msInHour],\n  [12 * msInHour, 24 * msInHour],\n];\n\nconst blockOutNoon = [\n  [0 * msInHour, 12 * msInHour],\n  [17 * msInHour, 24 * msInHour],\n];\n\nconst blockOutEvening = [[0 * msInHour, 17 * msInHour]];\n\nfunction blockOutsForCalMode(\n  calMode /*: CalMode*/\n) /*: MsSinceMidnightRange[]*/ {\n  switch (calMode) {\n    case \"allDay\":\n      return blockOutAllDay;\n    case \"morning\":\n      return blockOutMorning;\n    case \"noon\":\n      return blockOutNoon;\n    case \"evening\":\n      return blockOutEvening;\n    default:\n      return \"unhandled calMode\";\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}